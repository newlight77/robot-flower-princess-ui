name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:

  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.6'
        channel: 'stable'

    - name: Install dependencies
      run: flutter pub get

    - name: Run unit tests with coverage
      run: |
        flutter test test/unit/ --coverage

        COVERAGE=$(lcov --summary coverage/lcov.info 2>&1 | grep "lines" | awk '{print $2}' | sed 's/%//')
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "üìä Total Coverage: $COVERAGE%"

    - name: Upload unit test coverage
      uses: actions/upload-artifact@v4
      with:
        name: unit-coverage
        path: coverage/lcov.info
        retention-days: 1

  test-use-case:
    name: Use Case Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.6'
        channel: 'stable'

    - name: Install dependencies
      run: flutter pub get

    - name: Run use case tests with coverage
      run: |
        flutter test test/use_case/ --coverage

        COVERAGE=$(lcov --summary coverage/lcov.info 2>&1 | grep "lines" | awk '{print $2}' | sed 's/%//')
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "üìä Total Coverage: $COVERAGE%"

    - name: Upload use case test coverage
      uses: actions/upload-artifact@v4
      with:
        name: use-case-coverage
        path: coverage/lcov.info
        retention-days: 1

  test-widget:
    name: Widget Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.6'
        channel: 'stable'

    - name: Install dependencies
      run: flutter pub get

    - name: Run widget tests with coverage
      run: |
        flutter test test/widget/ --coverage

        COVERAGE=$(lcov --summary coverage/lcov.info 2>&1 | grep "lines" | awk '{print $2}' | sed 's/%//')
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "üìä Total Coverage: $COVERAGE%"

    - name: Upload widget test coverage
      uses: actions/upload-artifact@v4
      with:
        name: widget-coverage
        path: coverage/lcov.info
        retention-days: 1

  test-feature:
    name: Feature Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.6'
        channel: 'stable'

    - name: Install dependencies
      run: flutter pub get

    - name: Run feature tests with coverage
      run: |
        flutter test test/feature/ --coverage

        COVERAGE=$(lcov --summary coverage/lcov.info 2>&1 | grep "lines" | awk '{print $2}' | sed 's/%//')
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "üìä Total Coverage: $COVERAGE%"

    - name: Upload feature test coverage
      uses: actions/upload-artifact@v4
      with:
        name: feature-coverage
        path: coverage/lcov.info
        retention-days: 1

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [test-unit, test-use-case, test-widget, test-feature]

    steps:
    - uses: actions/checkout@v5

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.6'
        channel: 'stable'

    - name: Install lcov
      run: sudo apt-get install -y lcov

    - name: Download all coverage artifacts
      uses: actions/download-artifact@v4
      with:
        path: coverage-artifacts

    - name: Merge coverage reports
      id: coverage-merge
      run: |
        mkdir -p coverage
        lcov --add-tracefile coverage-artifacts/unit-coverage/lcov.info \
             --add-tracefile coverage-artifacts/use-case-coverage/lcov.info \
             --add-tracefile coverage-artifacts/widget-coverage/lcov.info \
             --add-tracefile coverage-artifacts/feature-coverage/lcov.info \
             --output-file coverage/lcov.info

        echo "üîß Removing test helpers from coverage..."
        lcov --remove coverage/lcov.info \
             '*/game_mock_datasource.dart' \
             '*/game_mock_repository.dart' \
             --output-file coverage/lcov.info

        COVERAGE=$(lcov --summary coverage/lcov.info 2>&1 | grep "lines" | awk '{print $2}' | sed 's/%//')
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "üìä Total Coverage: $COVERAGE% (excluding mock files)"

    - name: Generate HTML coverage report
      run: |
        genhtml coverage/lcov.info \
          --output-directory coverage/html \
          --title "Robot Flower Princess - Test Coverage" \
          --show-details \
          --legend

    - name: Check coverage threshold
      run: |
        COVERAGE=${{ steps.coverage-merge.outputs.percentage }}
        THRESHOLD=80
        echo "Coverage: $COVERAGE%"
        echo "Threshold: $THRESHOLD%"
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "‚ùå Coverage $COVERAGE% is below threshold $THRESHOLD%"
          exit 1
        else
          echo "‚úÖ Coverage $COVERAGE% meets threshold $THRESHOLD%"
        fi

    - name: Generate Job Summary
      if: always()
      run: |
        COVERAGE=${{ steps.coverage.outputs.percentage }}
        THRESHOLD=80
        PASSED=${{ steps.coverage.outputs.percentage >= 80 && 'true' || 'false' }}

        echo "# üß™ Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üìä Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Total Coverage** | ${COVERAGE}% | $([ $(echo "$COVERAGE >= $THRESHOLD" | bc -l) -eq 1 ] && echo "‚úÖ PASS" || echo "‚ùå FAIL") |" >> $GITHUB_STEP_SUMMARY
        echo "| **Coverage Threshold** | ${THRESHOLD}% | - |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üß© Test Suites" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Tests | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| Use Case Tests | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| Widget Tests | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| Feature Tests | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üìà Coverage Details" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- HTML Report available in workflow artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Detailed line-by-line coverage can be viewed in the HTML report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Upload merged coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage/lcov.info
        flags: all-tests
        name: merged-coverage

    - name: Upload HTML coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html-report
        path: coverage/html
        retention-days: 30

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ steps.coverage-merge.outputs.percentage }}';
          const threshold = '80';
          const passed = parseFloat(coverage) >= parseFloat(threshold);
          const emoji = passed ? '‚úÖ' : '‚ùå';

          const comment = `## ${emoji} Test Coverage Report

          **Total Coverage:** ${coverage}%
          **Threshold:** ${threshold}%
          **Status:** ${passed ? 'PASSED' : 'FAILED'}

          | Test Suite | Status |
          |------------|--------|
          | Unit Tests | ‚úÖ |
          | Use Case Tests | ‚úÖ |
          | Widget Tests | ‚úÖ |
          | Feature Tests | ‚úÖ |

          [View detailed coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          `;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  build-web:
    name: Build Web
    needs: [code-coverage]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v5

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.6'
        channel: 'stable'

    - name: Install dependencies
      run: flutter pub get

    - name: Build web
      run: flutter build web --release

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-build
        path: build/web

  docker:
    name: Build Docker Image
    needs: [build-web]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v5

    - name: Build Docker image
      run: docker build -t robot-flower-princess:${{ github.sha }} .
