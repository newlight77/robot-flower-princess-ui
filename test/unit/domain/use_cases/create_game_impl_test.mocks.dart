// Mocks generated by Mockito 5.4.6 from annotations
// in robot_flower_princess_front/test/unit/domain/use_cases/create_game_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:robot_flower_princess_front/core/error/failures.dart' as _i5;
import 'package:robot_flower_princess_front/domain/entities/game.dart' as _i6;
import 'package:robot_flower_princess_front/domain/entities/game_board.dart'
    as _i9;
import 'package:robot_flower_princess_front/domain/ports/outbound/game_repository.dart'
    as _i3;
import 'package:robot_flower_princess_front/domain/value_objects/action_type.dart'
    as _i7;
import 'package:robot_flower_princess_front/domain/value_objects/direction.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GameRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockGameRepository extends _i1.Mock implements _i3.GameRepository {
  MockGameRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Game>> createGame(
    String? name,
    int? boardSize,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createGame,
          [
            name,
            boardSize,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Game>>.value(
            _FakeEither_0<_i5.Failure, _i6.Game>(
          this,
          Invocation.method(
            #createGame,
            [
              name,
              boardSize,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Game>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Game>>> getGames({int? limit}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGames,
          [],
          {#limit: limit},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Game>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Game>>(
          this,
          Invocation.method(
            #getGames,
            [],
            {#limit: limit},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Game>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Game>> getGame(String? gameId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGame,
          [gameId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Game>>.value(
            _FakeEither_0<_i5.Failure, _i6.Game>(
          this,
          Invocation.method(
            #getGame,
            [gameId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Game>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Game>> executeAction(
    String? gameId,
    _i7.ActionType? action,
    _i8.Direction? direction,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #executeAction,
          [
            gameId,
            action,
            direction,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Game>>.value(
            _FakeEither_0<_i5.Failure, _i6.Game>(
          this,
          Invocation.method(
            #executeAction,
            [
              gameId,
              action,
              direction,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Game>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Game>> autoPlay(String? gameId) =>
      (super.noSuchMethod(
        Invocation.method(
          #autoPlay,
          [gameId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Game>>.value(
            _FakeEither_0<_i5.Failure, _i6.Game>(
          this,
          Invocation.method(
            #autoPlay,
            [gameId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Game>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i9.GameBoard>>> replayGame(
          String? gameId) =>
      (super.noSuchMethod(
        Invocation.method(
          #replayGame,
          [gameId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i9.GameBoard>>>.value(
                _FakeEither_0<_i5.Failure, List<_i9.GameBoard>>(
          this,
          Invocation.method(
            #replayGame,
            [gameId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i9.GameBoard>>>);
}
