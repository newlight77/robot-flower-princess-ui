{
  "openapi": "3.1.0",
  "info": {
    "title": "Robot-Flower-Princess Game API",
    "description": "A strategic puzzle game API where you guide a robot to collect flowers and deliver them to a princess",
    "version": "1.0.0"
  },
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Health Check",
        "description": "Health check endpoint.\n\nReturns system status and basic API information.\nUsed by monitoring tools and load balancers.",
        "operationId": "health_check_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Health Check Health Get"
                }
              }
            }
          }
        }
      }
    },
    "/api/games/": {
      "post": {
        "tags": [
          "games"
        ],
        "summary": "Create Game",
        "description": "Create a new game with specified board size.",
        "operationId": "create_game_api_games__post",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateGameRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGameResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "games"
        ],
        "summary": "Get Games",
        "description": "Get the last N games, optionally filtered by status.",
        "operationId": "get_games_api_games__get",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10,
              "title": "Limit"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "in_progress",
              "title": "Status"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GamesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/games/{game_id}": {
      "get": {
        "tags": [
          "games"
        ],
        "summary": "Get Game State",
        "description": "Get the current state of a game.",
        "operationId": "get_game_state_api_games__game_id__get",
        "parameters": [
          {
            "name": "game_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Game Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGameResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/games/{game_id}/action": {
      "post": {
        "tags": [
          "games"
        ],
        "summary": "Perform Action",
        "description": "Perform an action on the game. The request.action selects the operation.\n\nIf action is 'rotate', provide a 'direction' field.",
        "operationId": "perform_action_api_games__game_id__action_post",
        "parameters": [
          {
            "name": "game_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Game Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionRequest",
                "examples": {
                  "rotate": {
                    "summary": "Rotate robot",
                    "value": {
                      "action": "rotate",
                      "direction": "SOUTH"
                    }
                  },
                  "move": {
                    "summary": "Move robot",
                    "value": {
                      "action": "move",
                      "direction": "SOUTH"
                    }
                  },
                  "pickFlower": {
                    "summary": "Pick a flower",
                    "value": {
                      "action": "pickFlower",
                      "direction": "SOUTH"
                    }
                  },
                  "dropFlower": {
                    "summary": "Drop a flower",
                    "value": {
                      "action": "dropFlower",
                      "direction": "SOUTH"
                    }
                  },
                  "giveFlower": {
                    "summary": "Give flowers",
                    "value": {
                      "action": "giveFlower",
                      "direction": "SOUTH"
                    }
                  },
                  "clean": {
                    "summary": "Clean obstacle",
                    "value": {
                      "action": "clean",
                      "direction": "SOUTH"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/games/{game_id}/autoplay": {
      "post": {
        "tags": [
          "aiplayer"
        ],
        "summary": "Autoplay",
        "description": "Let AI solve the game automatically.\n\nThree strategies available:\n- **greedy** (default): Safe & reliable. 75% success rate. Checks safety before picking flowers.\n- **optimal**: Fast & efficient. 62% success rate, but 25% fewer actions. Uses A* pathfinding and multi-step planning.\n- **ml**: Hybrid ML/heuristic approach. Uses ML Player service for predictions. Learns from game patterns.",
        "operationId": "autoplay_api_games__game_id__autoplay_post",
        "parameters": [
          {
            "name": "game_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Game Id"
            }
          },
          {
            "name": "strategy",
            "in": "query",
            "required": false,
            "schema": {
              "enum": [
                "greedy",
                "optimal",
                "ml"
              ],
              "type": "string",
              "description": "AI strategy: 'greedy' (safe, 75% success), 'optimal' (fast, 62% success, -25% actions), or 'ml' (hybrid ML/heuristic)",
              "default": "greedy",
              "title": "Strategy"
            },
            "description": "AI strategy: 'greedy' (safe, 75% success), 'optimal' (fast, 62% success, -25% actions), or 'ml' (hybrid ML/heuristic)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActionRequest": {
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ActionType"
          },
          "direction": {
            "type": "string",
            "enum": [
              "NORTH",
              "SOUTH",
              "EAST",
              "WEST"
            ],
            "title": "Direction"
          }
        },
        "type": "object",
        "required": [
          "action",
          "direction"
        ],
        "title": "ActionRequest"
      },
      "ActionResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "game": {
            "additionalProperties": true,
            "type": "object",
            "title": "Game"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "success",
          "game",
          "message"
        ],
        "title": "ActionResponse"
      },
      "ActionType": {
        "type": "string",
        "enum": [
          "rotate",
          "move",
          "pickFlower",
          "dropFlower",
          "giveFlower",
          "clean"
        ],
        "title": "ActionType"
      },
      "CreateGameRequest": {
        "properties": {
          "rows": {
            "type": "integer",
            "maximum": 50.0,
            "minimum": 3.0,
            "title": "Rows",
            "description": "Number of rows (3-50)"
          },
          "cols": {
            "type": "integer",
            "maximum": 50.0,
            "minimum": 3.0,
            "title": "Cols",
            "description": "Number of columns (3-50)"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Optional game name",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "rows",
          "cols"
        ],
        "title": "CreateGameRequest"
      },
      "CreateGameResponse": {
        "properties": {
          "game": {
            "additionalProperties": true,
            "type": "object",
            "title": "Game"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "game"
        ],
        "title": "CreateGameResponse"
      },
      "GamesResponse": {
        "properties": {
          "games": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Games"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "games",
          "total"
        ],
        "title": "GamesResponse"
      },
      "GetGameResponse": {
        "properties": {
          "game": {
            "additionalProperties": true,
            "type": "object",
            "title": "Game"
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "game"
        ],
        "title": "GetGameResponse"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}